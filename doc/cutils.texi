\input texinfo   @c -*-texinfo-*-
@setfilename cutils.info
@settitle The cutils Manual

@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c @finalout
@end iftex

@setchapternewpage odd

@titlepage
@title The cutils Manual
@subtitle Edition 0.1 for cutils version 1.5
@subtitle July 1997
@author Sandro Sigala

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1997 Sandro Sigala <ssigala@@globalnet.it>.
@end titlepage

@c ---------------------------------------------------------------------------
@node Top, Overview, (dir), (dir)

This is the @emph{cutils} manual.

The cutils package is a collection of twelve utilities for ``C''
programmers.  They are mostly parsers that convert an input file
written in a particular format into another format.

@menu
* Overview::                    An overview of the cutils package.
* cinfo/cinfoc/cinfodc::        C language documentation tools.
* cdecl/cundecl::               Decode and encode C type declarations.
* cobfusc::                     Make a C source file unreadable but compilable.
* chilight::                    Highlight C source files.
* ctangle/cweave::              Simple literate programming tools for C.
* cunloop::                     Unloop C loops.
* yyextract::                   Extract grammar rules from Yacc grammars.
* yyref::                       Yacc grammar reference program.
* Bug reports::                 How to report a bug.
@end menu

@c ---------------------------------------------------------------------------
@node Overview, cinfo/cinfoc/cinfodc, Top, Top
@chapter Overview

The twelve utilities that are enclosed in the @emph{cutils} package
are usually useful in some circumstances during the development
in the ``C'' language.

@table @emph
@item cinfo
@item cinfoc
@item cinfodc
The @emph{cinfo} utility can be used to lookup the prototype of
a standard C function; the other two utilities are explained
later.
@item cdecl
@item cundecl
The @emph{cdecl} and @emph{cundecl} utilities
can be used to decode or encode a complex type declaration like
@example
void (*signal(int sig, void (*func)(int)))(int);
@end example
or
@example
declare funcvec as array[16] of pointer to function that expects
(void) returning int;
@end example
@item cobfusc
The @emph{cobfusc} utility can be used to obfuscate (i.e. render
unreadable but perfectly compilable) some code.
For example:
@example
int
main(int argc, char **argv)
@{
        int i;
        printf("program name: %s\n", argv[0]);
        printf("arguments:");
        for (i = 1; i < argc; i++)
                printf(" %s", argv[i]);
        printf("\n");
@}
@end example
can be converted to:
@example
int main(int q0,char**q1)@{int q2;printf(
"\160\162\157\147\162\141\155\40\156\141\155\145\72\40\45\163\n",
q1[0]);printf("\141\162\147\165\155\145\156\164\163\72");for(q2=1;
q2<q0;q2++)printf("\40\45\163",q1[q2]);printf("\n");@}
@end example
@item chilight
The @emph{chilight} utility can be used to highlight (i.e. fontify)
a source file with color escapes or commands, depending of the output
format (ANSI or HTML).
@item ctangle
@item cweave
The @emph{ctangle} and @emph{cweave} utilities can be used to
produce a literate source document, like Knuth's @emph{Web} or @emph{cweb}.
The @emph{ctangle} program extract the program source from the Web document;
@emph{cweave} produces the LaTeX source file that can be processed to
obtain the final document.
@item cunloop
The @emph{cunloop} does a job like the @emph{cobfusc} utility: it obfuscates
the source code, by unlooping the C language loop and branch instructions
@code{while}, @code{do}, @code{for}, @code{if} into a sequence of @code{goto}
instuctions to render the source file unreadable.
While @emph{cobfusc} works with every C source code,
@emph{cunloop} is semantically-dependant.
@item yyextract
The @emph{yyextract} utility can be used to extract the rules from
a Yacc grammar (or produce another grammar in a different format, like HTML).
@item yyref
The @emph{yyref} utility is a Yacc cross-reference generator.
@end table


@c ---------------------------------------------------------------------------
@node cinfo/cinfoc/cinfodc, cdecl/cundecl, Overview, Top
@chapter cinfo, cinfoc and cinfodc

The @emph{cinfo} utility searchs in his database the user specified symbol
(of the C programming language) and prints the proper documentation.
The @emph{cinfoc} utility is required for compiling the @emph{cinfo}
database.
The @emph{cinfodc} utility does the inverse job of the @emph{cinfoc} utility,
i.e. it decompiles a compiled database.

@menu
* Invoking cinfo::                 Command line options of cinfo.
* Invoking cinfoc::                Command line options of cinfoc.
* Invoking cinfodc::               Command line options of cinfodc.
* cinfo/cinfoc/cinfodc examples::  Some examples of this three utilities.
@end menu

@c ---------------------------------------------------------------------------
@node Invoking cinfo, Invoking cinfoc, cinfo/cinfoc/cinfodc, cinfo/cinfoc/cinfodc
@section Invoking cinfo

The options are as follows:

@table @samp
@item -c
Ignore case distinctions.
@item -d
Turn debug mode on.
@item -h
Output in HTML format.
@item -l
List symbol paths only, do not output symbol variables.
@item -o file
Set the output destination to @file{file}.
@item -p
Perform a pattern match string comparison.
@item -s
Perform a literal string comparison. This is the default.
@item -L dir
Force @samp{cinfo} to search into the @file{dir} directory.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node Invoking cinfoc, Invoking cinfodc, Invoking cinfo, cinfo/cinfoc/cinfodc
@section Invoking cinfoc

The options are as follows:

@table @samp
@item -d
Turn debug mode on.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node Invoking cinfodc, cinfo/cinfoc/cinfodc examples, Invoking cinfoc, cinfo/cinfoc/cinfodc
@section Invoking cinfodc

The options are as follows:

@table @samp
@item -h
Output a header for every object that contains subobjects.
@item -o file
Set the output destination to @file{file}.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node cinfo/cinfoc/cinfodc examples,  , Invoking cinfodc, cinfo/cinfoc/cinfodc
@section cinfo, cinfoc and cinfodc examples

For searching the @code{printf} function, try:
@example
cinfo printf
@end example

For searching all the functions that contains @samp{print}, try:
@example
cinfo -p "*print*"
@end example

For searching the @code{addch} and @code{endwin} @emph{ncurses} functions,
and outputting the result in HTML format, try:
@example
cinfo -h addch endwin
@end example

For compiling the cinfo database source file @file{foo.cinfo}, try:
@example
cinfoc foo.cinfo
@end example

For decompiling the compiled cinfo database file @file{foo.cinfo.db}, try:
@example
cinfodc foo.cinfo.db
@end example

@c ---------------------------------------------------------------------------
@node cdecl/cundecl, cobfusc, cinfo/cinfoc/cinfodc, Top
@chapter cdecl and cundecl

The @emph{cdecl} and @emph{cundecl} utilities
can be used to decode or encode a complex type declaration like
@example
void (*signal(int sig, void (*func)(int)))(int);
@end example
or
@example
declare funcvec as array[16] of pointer to function that expects
(void) returning int;
@end example

@menu
* Invoking cdecl::              Command line options of cdecl.
* Invoking cundecl::            Command line options of cundecl.
* cdecl/cundecl examples::      Some examples of this two utilities.
@end menu

@c ---------------------------------------------------------------------------
@node Invoking cdecl, Invoking cundecl, cdecl/cundecl, cdecl/cundecl
@section Invoking cdecl

The options are as follows:

@table @samp
@item -o file
Set the output destination to @file{file}.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node Invoking cundecl, cdecl/cundecl examples, Invoking cdecl, cdecl/cundecl
@section Invoking cundecl

The options are as follows:

@table @samp
@item -o file
Set the output destination to @file{file}.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node cdecl/cundecl examples,  , Invoking cundecl, cdecl/cundecl
@section cdecl and cundecl examples

@emph{cdecl} input examples:
@example
char *s;
void (*signal(int sig, void (*func)(int)))(int);
(const char *)s;
(void (*)(int))signal_function;
@end example

@emph{cundecl} input examples:
@example
declare s as pointer to char;
declare x as function (fmt as pointer to const char, ...) returning int;
cast s into pointer to const char;
cast f into pointer to function (int) returning void;
@end example

@c ---------------------------------------------------------------------------
@node cobfusc, chilight, cdecl/cundecl, Top
@chapter cobfusc

From the 13th International Obfuscated C Code Contest@footnote{Check out the
IOCCC Web page:	@url{http://reality.sgi.com/csp/ioccc}} Rules:

@table @emph
@item Obfuscate
tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.
b.  To darken.  2. To confuse:  his emotions obfuscated his
judgment.  [LLat. obfuscare, to darken : ob(intensive) +
Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.
obfuscatory adj.
@end table

The @emph{cobfusc} utility converts the input file, written in the C language,
into a human unreadable one, but compilable.  The main work is converting
every identifier into a meaningless one, removing any comment and compacting
all the white-spaces when they are not required.

@menu
* Invoking cobfusc::            Command line options of cobfusc.
* cobfusc examples::            Some examples of this utility.
@end menu

@c ---------------------------------------------------------------------------
@node Invoking cobfusc, cobfusc examples, cobfusc, cobfusc
@section Invoking cobfusc

The options are as follows:

@table @samp
@item -a
Garble every string with octal escapes.
@item -b
Enable the digraphize mode.
@item -c no | lower | upper | screw | random
Set the identifier case scrambling mode.
@item -d
Compact the macros removing backslashes and white-spaces when
they are not required.
@item -e
Compact the white-spaces when they are not required.
@item -g file
Add first the identifiers contained in
@file{file} to the hash table. Useful
when those identifiers are used into two or more source files.
@item -h
Share the symbol table between the files passed on the command line.
@item -i numeric | word | random
Set the identifier garbling mode.
@item -m
Strip the comments.
@item -n
Garble integers with expressions.
@item -o file
Set the output destination to @file{file}.
@item -p file
Tell @emph{cobfusc} that the identifiers contained in @file{file} must
not be changed.
@item -r prefix
Specify the prefix to use when generating the identifiers.
@item -s seed
Specify the seed for generating the random numbers.
@item -t
Enable the trigraphize mode.
@item -u
Dump the symbol table to @file{file}.
@item -V
Print version information on standard output then exit.
@item -w cols
Set the width limit of the output.
@end table

@c ---------------------------------------------------------------------------
@node cobfusc examples,  , Invoking cobfusc, cobfusc
@section cobfusc examples

If you just want to compact the whitespaces, try:
@example
cobfusc -de <inputfile >outputfile
@end example

If you want to convent all the identifiers to meaningless computer
generated ones, try:
@example
cobfusc -inumeric <inputfile >outputfile
@end example

Or, if instead of numbers you like silly words like ``foo'' and ``bar'',
try:
@example
cobfusc -iword <inputfile >outputfile
@end example

For a maximum file obfuscation, try:
@example
cobfusc -abdemt -inumeric <inputfile >outputfile
@end example

@c ---------------------------------------------------------------------------
@node chilight, ctangle/cweave, cobfusc, Top
@chapter chilight

The @emph{chilight} utility can be used to highlight (i.e. fontify)
a source file with color escapes or commands, depending of the output
format (ANSI or HTML).

@menu
* Invoking chilight::           Command line options of chilight.
* chilight examples::           Some examples of this utility.
@end menu

@c ---------------------------------------------------------------------------
@node Invoking chilight, chilight examples, chilight, chilight
@section Invoking chilight

The options are as follows:

@table @samp
@item -d
Tread preprocessor directives as single characters. In other words every
directive is separated in tokens then colorized, instead of treading all the
directive as a single token.
@item -o file
Set the output destination to @file{file}.
@item -s style
Set the output format to @samp{style}.  @samp{style} can be
@samp{ansi_color} (the default), @samp{ansi_bold}, @samp{html_color} or
@samp{html_font}.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node chilight examples,  , Invoking chilight, chilight
@section chilight examples

For highlighting a source file with ANSI color escapes, try:
@example
chilight <inputfile
@end example

For highlighting a source file with HTML color commands, try:
@example
chilight -s html_color <inputfile
@end example

For highlighting a source file with HTML font commands, try:
@example
chilight -s html_font <inputfile
@end example

@c ---------------------------------------------------------------------------
@node ctangle/cweave, cunloop, chilight, Top
@chapter ctangle and cweave

The @emph{ctangle} and @emph{cweave} utilities can be used to
produce a literate source document, like Knuth's @emph{Web} or @emph{cweb}.
The @emph{ctangle} program extract the program source from the CWeb document;
@emph{cweave} produces the LaTeX source file that can be processed to
obtain the final document.
A CWeb file contains program source code interleaved with documentation.

@menu
* Invoking ctangle::            Command line options of ctangle.
* Invoking cweave::             Command line options of cweave.
* Input file format::           The format of the CWeb file.
* ctangle/cweave examples::     Some examples of this two utilities.
* Sample input file::           A sample Web file for the two utilities.
@end menu

@c ---------------------------------------------------------------------------
@node Invoking ctangle, Invoking cweave, ctangle/cweave, ctangle/cweave
@section Invoking ctangle

The options are as follows:

@table @samp
@item -o file
Set the output destination to @file{file}.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node Invoking cweave, Input file format, Invoking ctangle, ctangle/cweave
@section Invoking cweave

The options are as follows:

@table @samp
@item -h
Highlight the source code with different fonts.
@item -o file
Set the output destination to @file{file}.
@item -t width
Set the tabulation width to @samp{width}.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node Input file format, ctangle/cweave examples, Invoking cweave, ctangle/cweave
@section Input file format

A CWeb file is composed by sections of LaTeX commands and sections of C
source code.  The switching between the two section is possible with the
@code{@@@@} token sequence.  The default section is LaTeX.

The directives that can be inserted in the LaTeX section are as follows:

@table @code
@item @@decl [text]
Declare a new section of code (or continue an old one) with the
title @code{text}.

@item @@ref [text]
Reference a section of code with the title @code{text}.
@end table

@c ---------------------------------------------------------------------------
@node ctangle/cweave examples, Sample input file, Input file format, ctangle/cweave
@section ctangle and cweave examples

For extracting the source from a web file:
@example
ctangle <webfile >outputfile
@end example

For extracting the LaTeX source document from a web file:
@example
cweave <webfile >outputfile
@end example

For extracting the LaTeX source document from a web file and fontifying
the source code:
@example
cweave -h <webfile >outputfile
@end example

@c ---------------------------------------------------------------------------
@node Sample input file,  , ctangle/cweave examples, ctangle/cweave
@section Sample input file

For a sample input file for @emph{ctangle} and @emph{cweave}, look into
the @file{examples/cweb} directory in the source package.

@c ---------------------------------------------------------------------------
@node cunloop, yyextract, ctangle/cweave, Top
@chapter cunloop

The @emph{cunloop} does a job like the @emph{cobfusc} utility: it obfuscates
the source code, by unlooping the C language loop and branch instructions
@code{while}, @code{do}, @code{for}, @code{if} into a sequence of @code{goto}
instuctions to render the source file unreadable.
While @emph{cobfusc} works with every C source code,
@emph{cunloop} is semantically-dependant.
@emph{cunloop} can be used conjointly with @emph{cobfusc} to produce
a @strong{very} obfuscated source file.
Please note that the output of @emph{cunloop} can be very inefficient
and/or complex to be optimized by the C compiler, because the whole
of @code{goto}s produced by the unlooping.

@menu
* Invoking cunloop::            Command line options of cunloop.
* cunloop examples::            Some examples of this utility.
@end menu

@c ---------------------------------------------------------------------------
@node Invoking cunloop, cunloop examples, cunloop, cunloop
@section Invoking cunloop

The options are as follows:

@table @samp
@item -o file
Set the output destination to @file{file}.
@item -p prefix
Set the identifier prefix for generating the labels.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node cunloop examples,  , Invoking cunloop, cunloop
@section cunloop examples

For unlooping a source file, try:
@example
cunloop <inputfile >outputfile
@end example

For unlooping a source file using @code{foo_} as the prefix for generating
the labels, try:
@example
cunloop -p foo_ <inputfile >outputfile
@end example

@c ---------------------------------------------------------------------------
@node yyextract, yyref, cunloop, Top
@chapter yyextract

The @emph{yyextract} utility can be used to extract the rules from
a Yacc grammar (or produce another grammar in a different format, like HTML).

@menu
* Invoking yyextract::          Command line options of yyextract.
* yyextract examples::          Some examples of this utility.
@end menu

@c ---------------------------------------------------------------------------
@node Invoking yyextract, yyextract examples, yyextract, yyextract
@section Invoking yyextract

The options are as follows:

@table @samp
@item -b
Select the Backus-Naur Form (BNF) for the output.
@item -e
Select the Extended Backus-Naur Form (EBNF) for the output.
@item -h
Output in HTML format.
@item -o file
Set the output destination to @file{file}.
@item -w cols
Set the width limit of the output (this sets only the width of the
@samp{%token} header).
@item -y
Select the yacc format for the output. This is the default format.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node yyextract examples,  , Invoking yyextract, yyextract
@section yyextract examples

For extracting the rules from a Yacc grammar, try:
@example
yyextract <inputfile >outputfile
@end example

For extracting the rules from a Yacc grammar in BNF format, try:
@example
yyextract -b <inputfile >outputfile
@end example

For extracting the rules from a Yacc grammar in EBNF/HTML format, try:
@example
yyextract -eh <inputfile >outputfile
@end example

@c ---------------------------------------------------------------------------
@node yyref, Bug reports, yyextract, Top
@chapter yyref

The @emph{yyref} utility is a Yacc cross-reference generator.

@menu
* Invoking yyref::              Command line options of yyref.
* yyref examples::              Some examples of this utility.
@end menu

@c ---------------------------------------------------------------------------
@node Invoking yyref, yyref examples, yyref, yyref
@section Invoking yyref

The options are as follows:

@table @samp
@item -o file
Set the output destination to @file{file}.
@item -V
Print version information on standard output then exit.
@end table

@c ---------------------------------------------------------------------------
@node yyref examples,  , Invoking yyref, yyref
@section yyref examples

For creating the cross-references from a Yacc grammar, try:
@example
yyref <inputfile
@end example

@c ---------------------------------------------------------------------------
@node Bug reports,  , yyref, Top
@chapter Bug reports

Any questions, comments, or bug reports, should be sent to the
author at the Internet email @w{address @emph{<ssigala@@globalnet.it>}}.

@contents

@bye
