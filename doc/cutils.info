This is Info file cutils.info, produced by Makeinfo version 1.68 from
the input file cutils.texi.


File: cutils.info,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

   This is the *cutils* manual.

   The cutils package is a collection of twelve utilities for "C"
programmers.  They are mostly parsers that convert an input file
written in a particular format into another format.

* Menu:

* Overview::                    An overview of the cutils package.
* cinfo/cinfoc/cinfodc::        C language documentation tools.
* cdecl/cundecl::               Decode and encode C type declarations.
* cobfusc::                     Make a C source file unreadable but compilable.
* chilight::                    Highlight C source files.
* ctangle/cweave::              Simple literate programming tools for C.
* cunloop::                     Unloop C loops.
* yyextract::                   Extract grammar rules from Yacc grammars.
* yyref::                       Yacc grammar reference program.
* Bug reports::                 How to report a bug.


File: cutils.info,  Node: Overview,  Next: cinfo/cinfoc/cinfodc,  Prev: Top,  Up: Top

Overview
********

   The twelve utilities that are enclosed in the *cutils* package are
usually useful in some circumstances during the development in the "C"
language.

*cinfo*

*cinfoc*

*cinfodc*
     The *cinfo* utility can be used to lookup the prototype of a
     standard C function; the other two utilities are explained later.

*cdecl*

*cundecl*
     The *cdecl* and *cundecl* utilities can be used to decode or
     encode a complex type declaration like
          void (*signal(int sig, void (*func)(int)))(int);
     or
          declare funcvec as array[16] of pointer to function that expects
          (void) returning int;

*cobfusc*
     The *cobfusc* utility can be used to obfuscate (i.e. render
     unreadable but perfectly compilable) some code.  For example:
          int
          main(int argc, char **argv)
          {
                  int i;
                  printf("program name: %s\n", argv[0]);
                  printf("arguments:");
                  for (i = 1; i < argc; i++)
                          printf(" %s", argv[i]);
                  printf("\n");
          }
     can be converted to:
          int main(int q0,char**q1){int q2;printf(
          "\160\162\157\147\162\141\155\40\156\141\155\145\72\40\45\163\n",
          q1[0]);printf("\141\162\147\165\155\145\156\164\163\72");for(q2=1;
          q2<q0;q2++)printf("\40\45\163",q1[q2]);printf("\n");}

*chilight*
     The *chilight* utility can be used to highlight (i.e. fontify) a
     source file with color escapes or commands, depending of the output
     format (ANSI or HTML).

*ctangle*

*cweave*
     The *ctangle* and *cweave* utilities can be used to produce a
     literate source document, like Knuth's *Web* or *cweb*.  The
     *ctangle* program extract the program source from the Web document;
     *cweave* produces the LaTeX source file that can be processed to
     obtain the final document.

*cunloop*
     The *cunloop* does a job like the *cobfusc* utility: it obfuscates
     the source code, by unlooping the C language loop and branch
     instructions `while', `do', `for', `if' into a sequence of `goto'
     instuctions to render the source file unreadable.  While *cobfusc*
     works with every C source code, *cunloop* is
     semantically-dependant.

*yyextract*
     The *yyextract* utility can be used to extract the rules from a
     Yacc grammar (or produce another grammar in a different format,
     like HTML).

*yyref*
     The *yyref* utility is a Yacc cross-reference generator.


File: cutils.info,  Node: cinfo/cinfoc/cinfodc,  Next: cdecl/cundecl,  Prev: Overview,  Up: Top

cinfo, cinfoc and cinfodc
*************************

   The *cinfo* utility searchs in his database the user specified symbol
(of the C programming language) and prints the proper documentation.
The *cinfoc* utility is required for compiling the *cinfo* database.
The *cinfodc* utility does the inverse job of the *cinfoc* utility,
i.e. it decompiles a compiled database.

* Menu:

* Invoking cinfo::                 Command line options of cinfo.
* Invoking cinfoc::                Command line options of cinfoc.
* Invoking cinfodc::               Command line options of cinfodc.
* cinfo/cinfoc/cinfodc examples::  Some examples of this three utilities.


File: cutils.info,  Node: Invoking cinfo,  Next: Invoking cinfoc,  Prev: cinfo/cinfoc/cinfodc,  Up: cinfo/cinfoc/cinfodc

Invoking cinfo
==============

   The options are as follows:

`-c'
     Ignore case distinctions.

`-d'
     Turn debug mode on.

`-h'
     Output in HTML format.

`-l'
     List symbol paths only, do not output symbol variables.

`-o file'
     Set the output destination to `file'.

`-p'
     Perform a pattern match string comparison.

`-s'
     Perform a literal string comparison. This is the default.

`-L dir'
     Force `cinfo' to search into the `dir' directory.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: Invoking cinfoc,  Next: Invoking cinfodc,  Prev: Invoking cinfo,  Up: cinfo/cinfoc/cinfodc

Invoking cinfoc
===============

   The options are as follows:

`-d'
     Turn debug mode on.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: Invoking cinfodc,  Next: cinfo/cinfoc/cinfodc examples,  Prev: Invoking cinfoc,  Up: cinfo/cinfoc/cinfodc

Invoking cinfodc
================

   The options are as follows:

`-h'
     Output a header for every object that contains subobjects.

`-o file'
     Set the output destination to `file'.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: cinfo/cinfoc/cinfodc examples,  Prev: Invoking cinfodc,  Up: cinfo/cinfoc/cinfodc

cinfo, cinfoc and cinfodc examples
==================================

   For searching the `printf' function, try:
     cinfo printf

   For searching all the functions that contains `print', try:
     cinfo -p "*print*"

   For searching the `addch' and `endwin' *ncurses* functions, and
outputting the result in HTML format, try:
     cinfo -h addch endwin

   For compiling the cinfo database source file `foo.cinfo', try:
     cinfoc foo.cinfo

   For decompiling the compiled cinfo database file `foo.cinfo.db', try:
     cinfodc foo.cinfo.db


File: cutils.info,  Node: cdecl/cundecl,  Next: cobfusc,  Prev: cinfo/cinfoc/cinfodc,  Up: Top

cdecl and cundecl
*****************

   The *cdecl* and *cundecl* utilities can be used to decode or encode
a complex type declaration like
     void (*signal(int sig, void (*func)(int)))(int);
   or
     declare funcvec as array[16] of pointer to function that expects
     (void) returning int;

* Menu:

* Invoking cdecl::              Command line options of cdecl.
* Invoking cundecl::            Command line options of cundecl.
* cdecl/cundecl examples::      Some examples of this two utilities.


File: cutils.info,  Node: Invoking cdecl,  Next: Invoking cundecl,  Prev: cdecl/cundecl,  Up: cdecl/cundecl

Invoking cdecl
==============

   The options are as follows:

`-o file'
     Set the output destination to `file'.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: Invoking cundecl,  Next: cdecl/cundecl examples,  Prev: Invoking cdecl,  Up: cdecl/cundecl

Invoking cundecl
================

   The options are as follows:

`-o file'
     Set the output destination to `file'.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: cdecl/cundecl examples,  Prev: Invoking cundecl,  Up: cdecl/cundecl

cdecl and cundecl examples
==========================

   *cdecl* input examples:
     char *s;
     void (*signal(int sig, void (*func)(int)))(int);
     (const char *)s;
     (void (*)(int))signal_function;

   *cundecl* input examples:
     declare s as pointer to char;
     declare x as function (fmt as pointer to const char, ...) returning int;
     cast s into pointer to const char;
     cast f into pointer to function (int) returning void;


File: cutils.info,  Node: cobfusc,  Next: chilight,  Prev: cdecl/cundecl,  Up: Top

cobfusc
*******

   From the 13th International Obfuscated C Code Contest(1) Rules:

*Obfuscate*
     tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.  b.  To
     darken.  2. To confuse:  his emotions obfuscated his judgment.
     [LLat. obfuscare, to darken : ob(intensive) + Lat. fuscare, to
     darken < fuscus, dark.] -obfuscation n.  obfuscatory adj.

   The *cobfusc* utility converts the input file, written in the C
language, into a human unreadable one, but compilable.  The main work
is converting every identifier into a meaningless one, removing any
comment and compacting all the white-spaces when they are not required.

* Menu:

* Invoking cobfusc::            Command line options of cobfusc.
* cobfusc examples::            Some examples of this utility.

   ---------- Footnotes ----------

   (1) Check out the IOCCC Web page:	`http://reality.sgi.com/csp/ioccc'


File: cutils.info,  Node: Invoking cobfusc,  Next: cobfusc examples,  Prev: cobfusc,  Up: cobfusc

Invoking cobfusc
================

   The options are as follows:

`-a'
     Garble every string with octal escapes.

`-c no | lower | upper | screw | random'
     Set the identifier case scrambling mode.

`-d'
     Compact the macros removing backslashes and white-spaces when they
     are not required.

`-e'
     Compact the white-spaces when they are not required.

`-g file'
     Add first the identifiers contained in `file' to the hash table.
     Useful when those identifiers are used into two or more source
     files.

`-h'
     Share the symbol table between the files passed on the command
     line.

`-i numeric | word | random'
     Set the identifier garbling mode.

`-m'
     Strip the comments.

`-n'
     Garble integers with expressions.

`-o file'
     Set the output destination to `file'.

`-p file'
     Tell *cobfusc* that the identifiers contained in `file' must not
     be changed.

`-r prefix'
     Specify the prefix to use when generating the identifiers.

`-s seed'
     Specify the seed for generating the random numbers.

`-t no | all | random'
     Set the trigraphize mode.

`-u'
     Dump the symbol table to `file'.

`-V'
     Print version information on standard output then exit.

`-w cols'
     Set the width limit of the output.


File: cutils.info,  Node: cobfusc examples,  Prev: Invoking cobfusc,  Up: cobfusc

cobfusc examples
================

   If you just want to compact the whitespaces, try:
     cobfusc -de <inputfile >outputfile

   If you want to convent all the identifiers to meaningless computer
generated ones, try:
     cobfusc -inumeric <inputfile >outputfile

   Or, if instead of numbers you like silly words like "foo" and "bar",
try:
     cobfusc -iword <inputfile >outputfile

   For a maximum file obfuscation, try:
     cobfusc -adem -inumeric <inputfile >outputfile


File: cutils.info,  Node: chilight,  Next: ctangle/cweave,  Prev: cobfusc,  Up: Top

chilight
********

   The *chilight* utility can be used to highlight (i.e. fontify) a
source file with color escapes or commands, depending of the output
format (ANSI or HTML).

* Menu:

* Invoking chilight::           Command line options of chilight.
* chilight examples::           Some examples of this utility.


File: cutils.info,  Node: Invoking chilight,  Next: chilight examples,  Prev: chilight,  Up: chilight

Invoking chilight
=================

   The options are as follows:

`-d'
     Tread preprocessor directives as single characters. In other words
     every directive is separated in tokens then colorized, instead of
     treading all the directive as a single token.

`-o file'
     Set the output destination to `file'.

`-s style'
     Set the output format to `style'.  `style' can be `ansi_color'
     (the default), `ansi_bold', `html_color' or `html_font'.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: chilight examples,  Prev: Invoking chilight,  Up: chilight

chilight examples
=================

   For highlighting a source file with ANSI color escapes, try:
     chilight <inputfile

   For highlighting a source file with HTML color commands, try:
     chilight -s html_color <inputfile

   For highlighting a source file with HTML font commands, try:
     chilight -s html_font <inputfile


File: cutils.info,  Node: ctangle/cweave,  Next: cunloop,  Prev: chilight,  Up: Top

ctangle and cweave
******************

   The *ctangle* and *cweave* utilities can be used to produce a
literate source document, like Knuth's *Web* or *cweb*.  The *ctangle*
program extract the program source from the CWeb document; *cweave*
produces the LaTeX source file that can be processed to obtain the
final document.  A CWeb file contains program source code interleaved
with documentation.

* Menu:

* Invoking ctangle::            Command line options of ctangle.
* Invoking cweave::             Command line options of cweave.
* Input file format::           The format of the CWeb file.
* ctangle/cweave examples::     Some examples of this two utilities.
* Sample input file::           A sample Web file for the two utilities.


File: cutils.info,  Node: Invoking ctangle,  Next: Invoking cweave,  Prev: ctangle/cweave,  Up: ctangle/cweave

Invoking ctangle
================

   The options are as follows:

`-o file'
     Set the output destination to `file'.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: Invoking cweave,  Next: Input file format,  Prev: Invoking ctangle,  Up: ctangle/cweave

Invoking cweave
===============

   The options are as follows:

`-h'
     Highlight the source code with different fonts.

`-o file'
     Set the output destination to `file'.

`-t width'
     Set the tabulation width to `width'.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: Input file format,  Next: ctangle/cweave examples,  Prev: Invoking cweave,  Up: ctangle/cweave

Input file format
=================

   A CWeb file is composed by sections of LaTeX commands and sections
of C source code.  The switching between the two section is possible
with the `@@' token sequence.  The default section is LaTeX.

   The directives that can be inserted in the LaTeX section are as
follows:

`@decl [text]'
     Declare a new section of code (or continue an old one) with the
     title `text'.

`@ref [text]'
     Reference a section of code with the title `text'.


File: cutils.info,  Node: ctangle/cweave examples,  Next: Sample input file,  Prev: Input file format,  Up: ctangle/cweave

ctangle and cweave examples
===========================

   For extracting the source from a web file:
     ctangle <webfile >outputfile

   For extracting the LaTeX source document from a web file:
     cweave <webfile >outputfile

   For extracting the LaTeX source document from a web file and
fontifying the source code:
     cweave -h <webfile >outputfile


File: cutils.info,  Node: Sample input file,  Prev: ctangle/cweave examples,  Up: ctangle/cweave

Sample input file
=================

   For a sample input file for *ctangle* and *cweave*, look into the
`examples/cweb' directory in the source package.


File: cutils.info,  Node: cunloop,  Next: yyextract,  Prev: ctangle/cweave,  Up: Top

cunloop
*******

   The *cunloop* does a job like the *cobfusc* utility: it obfuscates
the source code, by unlooping the C language loop and branch
instructions `while', `do', `for', `if' into a sequence of `goto'
instuctions to render the source file unreadable.  While *cobfusc*
works with every C source code, *cunloop* is semantically-dependant.
*cunloop* can be used conjointly with *cobfusc* to produce a *very*
obfuscated source file.  Please note that the output of *cunloop* can
be very inefficient and/or complex to be optimized by the C compiler,
because the whole of `goto's produced by the unlooping.

* Menu:

* Invoking cunloop::            Command line options of cunloop.
* cunloop examples::            Some examples of this utility.


File: cutils.info,  Node: Invoking cunloop,  Next: cunloop examples,  Prev: cunloop,  Up: cunloop

Invoking cunloop
================

   The options are as follows:

`-o file'
     Set the output destination to `file'.

`-p prefix'
     Set the identifier prefix for generating the labels.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: cunloop examples,  Prev: Invoking cunloop,  Up: cunloop

cunloop examples
================

   For unlooping a source file, try:
     cunloop <inputfile >outputfile

   For unlooping a source file using `foo_' as the prefix for generating
the labels, try:
     cunloop -p foo_ <inputfile >outputfile


File: cutils.info,  Node: yyextract,  Next: yyref,  Prev: cunloop,  Up: Top

yyextract
*********

   The *yyextract* utility can be used to extract the rules from a Yacc
grammar (or produce another grammar in a different format, like HTML).

* Menu:

* Invoking yyextract::          Command line options of yyextract.
* yyextract examples::          Some examples of this utility.


File: cutils.info,  Node: Invoking yyextract,  Next: yyextract examples,  Prev: yyextract,  Up: yyextract

Invoking yyextract
==================

   The options are as follows:

`-b'
     Select the Backus-Naur Form (BNF) for the output.

`-e'
     Select the Extended Backus-Naur Form (EBNF) for the output.

`-h'
     Output in HTML format.

`-o file'
     Set the output destination to `file'.

`-w cols'
     Set the width limit of the output (this sets only the width of the
     `%token' header).

`-y'
     Select the yacc format for the output. This is the default format.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: yyextract examples,  Prev: Invoking yyextract,  Up: yyextract

yyextract examples
==================

   For extracting the rules from a Yacc grammar, try:
     yyextract <inputfile >outputfile

   For extracting the rules from a Yacc grammar in BNF format, try:
     yyextract -b <inputfile >outputfile

   For extracting the rules from a Yacc grammar in EBNF/HTML format,
try:
     yyextract -eh <inputfile >outputfile


File: cutils.info,  Node: yyref,  Next: Bug reports,  Prev: yyextract,  Up: Top

yyref
*****

   The *yyref* utility is a Yacc cross-reference generator.

* Menu:

* Invoking yyref::              Command line options of yyref.
* yyref examples::              Some examples of this utility.


File: cutils.info,  Node: Invoking yyref,  Next: yyref examples,  Prev: yyref,  Up: yyref

Invoking yyref
==============

   The options are as follows:

`-o file'
     Set the output destination to `file'.

`-V'
     Print version information on standard output then exit.


File: cutils.info,  Node: yyref examples,  Prev: Invoking yyref,  Up: yyref

yyref examples
==============

   For creating the cross-references from a Yacc grammar, try:
     yyref <inputfile


File: cutils.info,  Node: Bug reports,  Prev: yyref,  Up: Top

Bug reports
***********

   Any questions, comments, or bug reports, should be sent to the
author at the Internet email address *<ssigala@globalnet.it>*.



Tag Table:
Node: Top99
Node: Overview1054
Node: cinfo/cinfoc/cinfodc3669
Node: Invoking cinfo4426
Node: Invoking cinfoc5091
Node: Invoking cinfodc5374
Node: cinfo/cinfoc/cinfodc examples5767
Node: cdecl/cundecl6428
Node: Invoking cdecl7031
Node: Invoking cundecl7326
Node: cdecl/cundecl examples7634
Node: cobfusc8183
Node: Invoking cobfusc9163
Node: cobfusc examples10540
Node: chilight11106
Node: Invoking chilight11511
Node: chilight examples12148
Node: ctangle/cweave12571
Node: Invoking ctangle13401
Node: Invoking cweave13703
Node: Input file format14119
Node: ctangle/cweave examples14733
Node: Sample input file15221
Node: cunloop15477
Node: Invoking cunloop16318
Node: cunloop examples16678
Node: yyextract17007
Node: Invoking yyextract17391
Node: yyextract examples18042
Node: yyref18492
Node: Invoking yyref18785
Node: yyref examples19062
Node: Bug reports19258

End Tag Table
